{hardware}
[ ] bigger 5v caps to clean power supply
[ ] test a 9v in place of the voltage inverter? clean up output. (@jer's?)
[ ] with jer's scope: scope output on triangle wave & clean it up (/||\/\/\)
[ ] ADC

{mounting}
[ ] space joystick cable off its board to clear audio board hardware
[ ] mount ROCKET0 programming header to plexi
[ ] add lots of screws to panels!

{software}
[ ] volume only affects disco
[ ] reuse board buffer space of splash screen using union?
[x] SPI error -> silence
[x] volume knob
[ ] disco music control interface
[x] volume knob UI
[ ] volume knob receive on audio board
[ ] volume knob takes 228 bytes!!
[ ] turn off volume prescaling in compile_audio
[U] crank audioboard up to higher sample rate; fix 8-bit overflow bigger buffers
	-- nope, AO_BUFLENG2==9 pushes RAM requirements to 2076; we just don't
	have enough memory to use bigger buffers on this chip.
	Why can't we move audio faster with small buffers? (not enough buffer
	to wait for SPI overhead? What's max rate we can pump SPI?)
Dang, BUFLENLG2=8 stopped working (ran out of RAM?); =7 too slow (due to volume?)
	...although we're 43% idle. That's busy, but not so busy that I still
	wonder why we're missing the deadline. Need to carefully analyze time
	budget (with logic analyzer?).
[x] SPI DMA interface
[x] use linear, not ulaw. why waste cycles for an 8-bit dac!?
Man, events suck.
steady state:

O==waiting for AO to empty.
D==waiting for SDCard to fill a buffer
OD -> Od -> od -> OD
if no more sdcard data is available, we move to Ox==waiting for sdcard_done
then to OD to wait for first buffer.
To interrupt, we need to be able to close out an existing SDC transaction!
So, SDC cycle:

transaction:
	reading:
		: signal that this buffer can be sent to audio device
		- done? start next transaction
		- interrupted? close transaction
		- start next buffer.
	- interrupted? close transaction
	- done? okay, don't do anything else
	- start next transaction
_as_play:
	set up block pointers to new stream
	if transaction already running, great, it'll stay so
	else start a transaction.

[ ] eliminate startup click (probably 0s to 127s)

[ ] longer booster noise to avoid click/pop

[ ] add uart_network debug message "stderr" path
[ ] report idle % for audioboard
[ ] intercom code

[ ] serial/eth adaptor

Command for going to RC mode:
	sudo avrdude -c usbtiny -p atmega328p -u -U lfuse:w:0xe2:m
Command for going to "full swing crystal oscillator":
	sudo avrdude -c usbtiny -p atmega328p -u -U lfuse:w:0xe6:m
Command I actually sent, for going to internal 128kHz oscillator:
	sudo avrdude -c usbtiny -p atmega328p -u -U lfuse:w:0xe3:m

Got keypad working: it was an initialization order problem (hal_init_keypad()
must come after hal_init_clock()).
Column 2 doesn't work; line INPUT1 (PD1) seems to be being held high,
like it wasn't put into input state?

Summary of learnings:
- fixed 3/4 of keypad: an ordering dependency had been violated, and the
poller's activation was getting lost b/c it was scheduled before clock started.
- adding second board on usb 5V made audio on PC speakers scratchier
- replacing -5V inverter with -12V wall wart solved that
- yet big amp still sounds like poop. Will need scope and brain.
- TWI was working, and then I tried the wall wart, and then it stopped working.
I hope I didn't bake something. :v(
- Volume code still harrably broken. (It sands harrable.)
- Hmm. I just got one twi message through. Weird. Maybe bus power is wilting.
- Sure sounds great on PC speakers!
