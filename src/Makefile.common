 #
 # This file is part of RulOS, Ravenna Ultra-Low-Altitude Operating
 # System -- the free, open-source operating system for microcontrollers.
 #
 # Written by Jon Howell (jonh@jonh.net) and Jeremy Elson (jelson@gmail.com),
 # May 2009.
 #
 # This operating system is in the public domain.  Copyright is waived.
 # All source code is completely free to use by anyone for any purpose
 # with no restrictions whatsoever.
 #
 # For more information about the project, see: www.jonh.net/rulos
 #


CORE_OBJECTS := \
	board_buffer.o \
	clock.o \
	cpumon.o \
	cursor.o \
	heap.o \
	idle_display.o \
	input_controller.o \
	joystick.o \
	knob.o \
	labeled_display.o \
	numeric_input.o \
	queue.o \
	random.o \
	util.o \
	region.o \
	network.o \
	event.o \
	spi.o \
	serial_console.o \
	uart.o \
	uart_net_media.o \
	net_compute_checksum.o \

ROCKET_OBJECTS := \
	display_compass.o \
	display_controller.o \
	display_docking.o \
	display_gratuitous_graph.o \
	display_rtc.o \
	display_scroll_msg.o \
	display_thrusters.o \
	display_thruster_graph.o \
	display_aer.o \
	drift_anim.o \
	audio_server.o \
	audio_client.o \
	audio_streamer.o \
	audio_out.o \
	audioled.o \
	calculator.o \
	focus.o \
	display_blinker.o \
	sequencer.o \
	lunar_distance.o \
	remote_keyboard.o \
	remote_bbuf.o \
	remote_uie.o \
	control_panel.o \
	thruster_protocol.o \
	sound.o \
	screen4.o \
	hpam.o \
	autotype.o \
	idle.o \
	hobbs.o \
	screenblanker.o \
	disco.o \
	booster.o \
	slow_boot.o \
	ring_buffer.o \
	quadknob.o \
	potsticker.o \
	funcseq.o \
	sdcard.o \
	volume_control.o \
	momentary_display.o \
	led_matrix_single.o \
	eeprom.o \
	rasters.o \
	ambient_noise.o \

COMMON_OBJECTS := $(CORE_OBJECTS)
#COMMON_OBJECTS += $(ROCKET_OBJECTS)
 
UNAME := $(shell uname)

ifeq ($(UNAME), Linux)
PYTHON := python
else
PYTHON := c:\\python27\\python.exe
endif

tesss:
	echo $(COMMON_OBJECTS)

.PHONY: all-platforms
all-platforms: sim-all avr-all

clean: sim-clean avr-clean

include $(ROCKET_ROOT)/Makefile.sim
include $(ROCKET_ROOT)/Makefile.avr
include $(ROCKET_ROOT)/Makefile.studio

# Generate the sevseg bitmaps from the artwork file
$(SIM_OBJDIR)/display_controller.o: $(SIM_OBJDIR)/sevseg_bitmaps.ch
$(AVR_OBJDIR)/display_controller.o: $(AVR_OBJDIR)/sevseg_bitmaps.ch

$(SIM_OBJDIR)/laserfont.o: $(SIM_OBJDIR)/laserfont.ch
$(AVR_OBJDIR)/laserfont.o: $(AVR_OBJDIR)/laserfont.ch

FONTZIPS=$(glob $(ROCKET_ROOT)/bitmaps/*.zip)

%/laserfont.ch: $(ROCKET_ROOT)/util/ttf_to_bitmap.py $(FONTZIPS)
	$(PYTHON) $(ROCKET_ROOT)/util/ttf_to_bitmap.py $(ROCKET_ROOT)/bitmaps > $@

%/sevseg_bitmaps.ch: $(ROCKET_ROOT)/util/sevseg_convert.py $(ROCKET_ROOT)/lib/sevseg_artwork.txt
	$(PYTHON) $(ROCKET_ROOT)/util/sevseg_convert.py $(ROCKET_ROOT)/lib/sevseg_artwork.txt > $@

%/audio_index.ch: $(ROCKET_ROOT)/audio/compile_audio.py $(ROCKET_ROOT)/include/sound.h
	$(PYTHON) $(ROCKET_ROOT)/audio/compile_audio.py -index $(ROCKET_ROOT)/include/sound.def $(ROCKET_ROOT)/audio/ > $@

# Generate rasters
$(SIM_OBJDIR)/rasters.o: $(SIM_OBJDIR)/rasters_auto.ch
$(AVR_OBJDIR)/rasters.o: $(AVR_OBJDIR)/rasters_auto.ch

$(AVR_OBJDIR)/hardware_graphic_lcd_12232.o: $(AVR_OBJDIR)/lcdrasters_auto.ch

%/rasters_auto.ch: $(ROCKET_ROOT)/util/bitmaploader.py $(ROCKET_ROOT)/bitmaps/*.png
	$(PYTHON) $(ROCKET_ROOT)/util/bitmaploader.py $@ $(ROCKET_ROOT)/bitmaps > /dev/null

%/lcdrasters_auto.ch: $(ROCKET_ROOT)/util/lcdbitmaploader.py $(ROCKET_ROOT)/lcdbitmaps/*.png
	$(PYTHON) $(ROCKET_ROOT)/util/lcdbitmaploader.py $@ $(ROCKET_ROOT)/lcdbitmaps > /dev/null
